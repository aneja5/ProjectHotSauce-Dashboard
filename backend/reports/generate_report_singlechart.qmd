---
title: "225 Building Environment Report"
author: "NEU Seattle Devs (Hot Sauce)"
date: "February 25, 2025"

# Document Configuration
format:
  pdf:
    documentclass: article
    papersize: letter
    fontsize: 12pt
    geometry: 
      - margin=1in
    number-sections: true
    colorlinks: true
    link-citations: true
    
# Execution Settings  
execute:
  echo: false
  warning: false
  error: false
  message: false
  fig-align: center

# Page Layout and Style
header-includes:
  - \usepackage{fancyhdr}
  - \pagestyle{fancy}
  - \fancyhf{}
  - \rhead{NEU Seattle Devs}
  - \lhead{225 Building Environment Report}
  - \cfoot{\thepage}

  # Custom H1 Dark Blue Styling
  - \usepackage{xcolor}
  - \definecolor{darkblue}{RGB}{32, 38, 115}
  - \usepackage{sectsty}
  - \sectionfont{\color{darkblue}}
---

# Basic Monitoring Information

## Sensor Details

```{python}
from datetime import datetime

# Sensor Information for multiple sensors
sensor_info = [
    {"id": "3", "Date": "2/25/2025", "Time Range": "8:30:20 - 12:15:01", "Location": "Floor-1", "Sensor Status": "OK"},
    {"id": "5", "Date": "2/25/2025", "Time Range": "8:30:20 - 12:15:01", "Location": "Floor-2", "Sensor Status": "OK"}
]


# Print sensor information properly
print("Sensor Information:")
print("=" * 40)

for sensor in sensor_info:
    print(f"Sensor # {sensor['id']}:")
    for key, value in sensor.items():
        if key != "id":  # Exclude 'id' from the inner loop
            print(f"  {key}: {value}")
    print("-" * 40)  # Separator for readability
```

## Environmental Monitoring Chart

# Environmental Monitoring Charts

```{python}
import matplotlib.pyplot as plt
import os

# Ensure the directory exists
output_dir = "charts"
os.makedirs(output_dir, exist_ok=True)  # Create if not exists

# Sample data for multiple sensors
times = ['8:30', '9:00', '9:30', '10:00', '10:30', '11:00', '11:30', '12:00']

# Sensor 1 (Floor 1)
temperature_1 = [76.1, 74.4, 71.2, 70.8, 72.4, 73.1, 72.4, 72.1]
humidity_1 = [45, 47, 46, 44, 42, 40, 39, 38]
co2_1 = [400, 450, 500, 550, 600, 650, 700, 750]
pm_1 = [12, 14.5, 11, 15, 11.2, 17, 16, 12]

# Sensor 2 (Floor 2)
temperature_2 = [74.1, 73.4, 70.2, 71.8, 73.4, 72.1, 71.4, 70.1]
humidity_2 = [48, 44, 45, 47, 42, 41, 39, 39]
co2_2 = [410, 420, 510, 550, 550, 600, 670, 670]
pm_2 = [15, 13.5, 12, 13, 15.2, 17, 13, 11]

# Define function for multi-sensor chart
def plot_multi_sensor(times, values1, values2, label, ylabel, color1, color2, filename):
    plt.figure(figsize=(8, 4))
    plt.plot(times, values1, label=f'Sensor 1 - {label}', color=color1, marker='o', markersize=5)
    plt.plot(times, values2, label=f'Sensor 2 - {label}', color=color2, marker='s', markersize=5)
    
    plt.xlabel('Time', fontsize=10)
    plt.ylabel(ylabel, fontsize=10)
    plt.title(f'{label} Comparison', fontsize=12)
    plt.legend(fontsize=8)
    plt.grid(True, linestyle='--', linewidth=0.5)
    plt.xticks(rotation=45, fontsize=8)
    plt.yticks(fontsize=8)
    
    # Save the plot in the /charts/ directory
    file_path = os.path.join(output_dir, filename)
    plt.savefig(file_path, dpi=200, bbox_inches='tight')
    plt.close()

# Generate and save charts in /charts/
plot_multi_sensor(times, temperature_1, temperature_2, 'Temperature (°F)', 'Temperature (°F)', 'red', 'orange', 'temperature_comparison.png')
plot_multi_sensor(times, humidity_1, humidity_2, 'Humidity (%)', 'Humidity (%)', 'blue', 'cyan', 'humidity_comparison.png')
plot_multi_sensor(times, co2_1, co2_2, 'CO2 (ppm)', 'CO2 (ppm)', 'green', 'lime', 'co2_comparison.png')
plot_multi_sensor(times, pm_1, pm_2, 'PM2.5', 'PM2.5', 'purple', 'magenta', 'pm_comparison.png')

print(f"Multi-sensor environmental monitoring charts saved in '{output_dir}/'.")
```

## Sensor Comparison Charts

### Temperature Comparison
![Temperature Comparison](/charts/temperature_comparison.png){width=80%}

### Humidity Comparison
![Humidity Comparison](/charts/humidity_comparison.png){width=80%}

### CO2 Comparison
![CO2 Comparison](/charts/co2_comparison.png){width=80%}

### PM 2.5 Comparison
![PM2.5 Comparison](/charts/pm_comparison.png){width=80%}

## Data Insights

```{python}

# TODO: get range of data

print(f"**Temperature**: ranging from {min(temperature_1)}° F to {max(temperature_1)}° F")
print(f"**Humidity**: ranging from {min(temperature_1)}° F to {max(temperature_1)}° F")
print(f"**CO2 Levels**: ranging from {min(temperature_1)}° F to {max(temperature_1)}° F")
print(f"**PM 2.5 Levels**: ranging from {min(temperature_1)}° F to {max(temperature_1)}° F")

```

# Comfort Level
**Comfort Scores**

```{python}
import numpy as np

def calculate_penalty(value, optimal_range, penalty_factor):
    if optimal_range[0] <= value <= optimal_range[1]:
        return 0
    return abs(value - sum(optimal_range) / 2) * penalty_factor

def calculate_ics(sensor_data):
    weights = {"temperature": 0.3, "humidity": 0.2, "co2": 0.3, "pm2.5": 0.2}
    optimal_ranges = {"temperature": (68, 77), "humidity": (40, 60), "co2": (400, 800), "pm2.5": (0, 12)}
    penalty_factors = {"temperature": 5, "humidity": 2, "co2": 1 / 10, "pm2.5": 2}
    
    scores = []
    for i in range(len(sensor_data["temperature"])):
        penalties = {
            key: calculate_penalty(sensor_data[key][i], optimal_ranges[key], penalty_factors[key])
            for key in sensor_data
        }
        ics = 100 - sum(weights[key] * penalties[key] for key in sensor_data)
        scores.append(round(ics, 2))
    avg_scores = round(sum(scores)/len(scores), 2)
    
    return avg_scores


# Sample sensor data
sensor_data = {
    "temperature": [72.5, 73.6, 74.8, 75.6, 76.5, 77.0, 77.5, 78.1],  # °F
    "humidity": [45, 47, 46, 44, 42, 40, 39, 38],  # %
    "co2": [400, 450, 500, 550, 600, 650, 700, 750],  # ppm
    "pm2.5": [12, 11, 24, 22, 14, 30, 35, 24]  # PM 2.5 index
}

ics_scores = calculate_ics(sensor_data)
print("Indoor Comfort Scores:", ics_scores)
```




**Comfort Levels**

-	Excellent (90-100) ✅ – Ideal indoor environment

-	Good (75-89) 🙂 – Comfortable but slightly off-optimal

-	Moderate (50-74) 😐 – Some discomfort noticeable

-	Poor (25-49) 😕 – Significant discomfort or air quality concerns

-	Unacceptable (0-24) ❌ – Unhealthy indoor conditions

**Comfort Categories**

1.	Temperature (°F) – Ideal indoor temperatures typically range between 70°F and 77°F for comfort.

2.	Humidity (%) – Optimal indoor humidity falls between 40% and 60% to maintain comfort and air quality.

3.	CO₂ Levels (ppm) – Higher CO₂ levels can indicate poor ventilation. Readings below 600 ppm are ideal, while values above 1000 ppm suggest poor air circulation.

4.	PM 2.5 (µg/m³) – Ideal indoor PM 2.5 levels should remain below 12 µg/m³. Levels exceeding 35 µg/m³ are considered unhealthy, especially for sensitive groups.




## Anomaly Detection -> for later dev
- CO2 and PM2.5 levels show steady increase
- Potential indicators:
  - Increased occupancy
  - Reduced ventilation
  - Ongoing activities in the monitored space

# Sensor Specification

- **Sensor Models**: ESP8266, PMS5003(PM2.5), SHT31-D(Temp/Hum), S8(CO2)
- **Calibration Date**: January 15, 2025
- **Sampling Interval**: 5 minutes
