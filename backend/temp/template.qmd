---
title: "225 Building Environment Report"
author: "NEU Seattle Devs (Hot Sauce)"
date: today

# Document Configuration
format:
  pdf:
    documentclass: article
    papersize: letter
    fontsize: 12pt
    geometry: 
      - margin=1in
    number-sections: true
    colorlinks: true
    link-citations: true
    keep-tex: true
    toc: true

# Execution Settings  
execute:
  echo: false
  warning: false
  error: false
  message: false
  fig-align: center

# Page Layout and Style
header-includes:
  - \usepackage{fancyhdr}
  - \pagestyle{fancy}
  - \fancyhf{}
  - \rhead{NEU Seattle Devs}
  - \lhead{225 Building Environment Report}
  - \cfoot{\thepage}
  - \usepackage{xcolor}
  - \definecolor{darkblue}{RGB}{32, 38, 115}
  - \usepackage{sectsty}
  - \sectionfont{\color{darkblue}}
  - \usepackage{datetime}
  - \date{\today}
  - \usepackage[english]{babel}
  - \renewcommand{\today}{\monthname[\the\month] \the\day, \the\year}
---


```{python}
import pandas as pd
import matplotlib.pyplot as plt
import os
from datetime import datetime
from collections import defaultdict
from data import report_type, selected_sensors, start_time, end_time, date_range

# Sensor ID to Name Mapping
sensor_name_map = {
    'bcff4dd3b24c': 'Sensor 2 - Room 110',
    'fcf5c497654a': 'Sensor 3 - Event Space',
    'bcff4dd3b442': 'Sensor 4 - Room 220',
    'd8bfc0c0e514': 'Sensor 5 - Courtyard',
    'a4cf12ff89ae': 'Sensor 6 - Room 216',
    '40f52032b5b7': 'Sensor 7 - Staff Space',
    '08f9e05fd2d3': 'Sensor 8 - Room 210',
    '485519ee6c1a': 'Sensor 9 - Lounge Space',
    '485519ee5010': 'Sensor 10 - Study Space',
    '2462ab14bae1': 'Sensor 11 - Room 307',
    '98f4abd6f8fa': 'Sensor 12 - Room 402',
    '18fe34f753d2': 'Sensor 13 - Room 416'
}

# Setup
output_dir = "charts"
os.makedirs(output_dir, exist_ok=True)

# Load data
df = pd.read_csv("sensor_data.csv")

# Convert Temperature from Celsius to Fahrenheit
df['Temperature'] = df['Temperature'] * 9/5 + 32

# Replace Sensor IDs with Names
df['Sensor Name'] = df['Sensor ID'].map(sensor_name_map).fillna(df['Sensor ID'])

# Parse Timestamp
df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df.sort_values(by='Timestamp', inplace=True)

# Set Timestamp as index for resampling
df.set_index('Timestamp', inplace=True)

# Resample to 30-minute intervals
# We'll use mean for numeric columns
resampled_data = []
for sensor_name in df['Sensor Name'].unique():
    sensor_df = df[df['Sensor Name'] == sensor_name]
    
    # Resample and aggregate
    resampled_sensor = sensor_df.groupby([pd.Grouper(freq='30T'), 'Sensor Name']).agg({
        'Temperature': 'mean',
        'Humidity': 'mean',
        'CO2': 'mean',
        'PM2.5': 'mean'
    }).reset_index()
    
    resampled_data.append(resampled_sensor)

# Combine resampled data
df_resampled = pd.concat(resampled_data)

# Custom sorting function for sensor names
def sensor_sort_key(name):
    # Extract the sensor number from the name
    try:
        return int(name.split()[1])
    except:
        return float('inf')


# Reset for further processing
df = df_resampled.reset_index(drop=True)

# Separate by sensor name
sensor_groups = df.groupby("Sensor Name")

# Function to generate charts for each metric
def plot_metric(metric, ylabel, filename_prefix, colors):
    plt.figure(figsize=(10, 5))
    for i, (sensor_name, group) in enumerate(sensor_groups):
        plt.plot(group['Timestamp'], group[metric], label=sensor_name, color=colors[i % len(colors)], marker='o')
    plt.xlabel("Timestamp")
    plt.ylabel(ylabel)
    plt.title(f"{metric} over Time")
    plt.legend(fontsize=8)
    plt.grid(True)
    filename = f"{output_dir}/{filename_prefix}.png"
    plt.savefig(filename, bbox_inches='tight', dpi=150)
    plt.close()

sensor_colors = [
    'red', 'orange', 'blue', 'green', 'purple', 'cyan',
    'teal', 'violet', 'black', 'gray', 'brown', 'magenta'
]

# Generate charts
plot_metric("Temperature", "Temperature (°F)", "temperature_chart", sensor_colors)
plot_metric("Humidity", "Humidity (%)", "humidity_chart", sensor_colors)
plot_metric("CO2", "CO2 (ppm)", "co2_chart", sensor_colors)
plot_metric("PM2.5", "PM2.5 (µg/m³)", "pm_chart", sensor_colors)

# Data Summary
summary = df.groupby("Sensor Name").agg({
    "Temperature": ["min", "max"],
    "Humidity": ["min", "max"],
    "CO2": ["min", "max"],
    "PM2.5": ["min", "max"]
}).round(0).astype(int)

# Sort the summary by sensor number
sorted_summary = summary.reindex(sorted(summary.index, key=sensor_sort_key))
print("\n\nSensor Data Summary\n")
print(f"Start Time: {start_time} | End Time: {end_time}\n")
print(sorted_summary)

```

# Sensor Charts

## Temperature
![Temperature](/charts/temperature_chart.png){width=85%}

## Humidity
![Humidity](/charts/humidity_chart.png){width=85%}

## CO2
![CO2](/charts/co2_chart.png){width=85%}

## PM2.5
![PM2.5](/charts/pm_chart.png){width=85%}


# Comfort Level & Indoor Climate Score

```{python}
import numpy as np

def sigmoid_penalty(value, optimal_range):
    """Applies a smooth sigmoid penalty to deviations from the optimal range."""
    lower, upper = optimal_range
    mid = (lower + upper) / 2
    range_width = ((upper - lower) / 2) / 1.8  # Adjusted to match Celsius scaling
    
    if lower <= value <= upper:
        return 1  # Ideal conditions → No penalty
    
    # Sigmoid function for penalty: rapid drop-off for extreme deviations
    deviation = min(abs(value - lower), abs(value - upper)) / range_width
    return 1 / (1 + np.exp(deviation - 2))  # Sigmoid scales penalty from 1 (ideal) to ~0 (bad)

def calculate_ics(sensor_df):
    weights = {"Temperature": 0.3, "Humidity": 0.2, "CO2": 0.3, "PM2.5": 0.2}
    optimal_ranges = {"Temperature": (69.8, 77), "Humidity": (40, 60), "CO2": (400, 800), "PM2.5": (0, 12)}

    scores = []
    for _, row in sensor_df.iterrows():
        penalties = {key: sigmoid_penalty(row[key], optimal_ranges[key]) for key in weights}

        # Compute weighted geometric mean to aggregate comfort levels
        ics = 100 * np.prod([penalties[k] ** weights[k] for k in weights])  
        scores.append(ics)

    return round(sum(scores) / len(scores), 2)

ics = calculate_ics(df)
print("Indoor Comfort Score: ", ics)
```


# **Indoor Comfort Score (ICS) Calculation**

## **Comfort Levels**
- **Excellent (90-100) ✅** – Ideal indoor conditions, highly comfortable.  
- **Good (75-89) 🙂** – Slight deviations, but still comfortable.  
- **Moderate (50-74) 😐** – Noticeable discomfort, but tolerable.  
- **Poor (25-49) 😕** – Significant discomfort, action needed.  
- **Unacceptable (0-24) ❌** – Severe discomfort, unhealthy conditions.  

---

## **Scoring Logic**
The **Indoor Comfort Score (ICS)** is based on four key indoor environmental factors:  

| **Factor**          | **Optimal Range** | **Source**                                   |
|---------------------|-------------------|----------------------------------------------|
| **Temperature (°F)**| **69.8 - 77**     | **ASHRAE Standard 55**                       |
| **Humidity (%)**    | **40 - 60**       | **ASHRAE Standard 55**                       |
| **CO2 (ppm)**       | **400 - 800**     | **EPA & ASHRAE Guidelines**                  |
| **PM2.5 (µg/m³)**   | **0 - 12**        | **U.S. EPA Air Quality Index (AQI)**         |

### **How the Score is Calculated**
1️⃣ **Ideal Conditions:**  
   - If a value falls **within the optimal range**, no penalty is applied.  

2️⃣ **Penalty for Deviations:**  
   - If a value is **outside the optimal range**, a **sigmoid-based penalty** is applied:  
     - **Small deviations → minimal penalty**  
     - **Larger deviations → exponentially stronger penalty**  

3️⃣ **Final Score Calculation:**  
   - The **Indoor Comfort Score (ICS)** is computed using a **weighted geometric mean**:  
     - Ensures **no single factor dominates**  
     - Balances **all environmental parameters proportionally**  
     - Generates a **realistic comfort score**  

---

**Sensor Models**: ESP8266, PMS5003(PM2.5), SHT31-D(Temp/Hum), S8(CO2)  
**Calibration Date**: January 15, 2025  
**Sampling Interval**: 5 minutes